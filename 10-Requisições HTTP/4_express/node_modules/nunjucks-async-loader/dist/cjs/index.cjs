"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileSystemAsyncLoader = void 0;
const promises_1 = require("node:fs/promises");
const node_path_1 = __importDefault(require("node:path"));
const nunjucks_1 = require("nunjucks");
const chokidar_1 = __importDefault(require("chokidar"));
class FileSystemAsyncLoader extends nunjucks_1.Loader {
    constructor(searchPaths, opts) {
        super();
        this.async = true;
        this.pathsToNames = {};
        this.searchPaths = [];
        const config = opts !== null && opts !== void 0 ? opts : {};
        if (searchPaths) {
            searchPaths = Array.isArray(searchPaths) ? searchPaths : [searchPaths];
            searchPaths = searchPaths.map(node_path_1.default.normalize);
        }
        else {
            searchPaths = ['.'];
        }
        this.searchPaths = searchPaths;
        this.noCache = !!config.noCache;
        if (config.watch) {
            this.watchDirs(searchPaths).catch(console.error);
        }
    }
    watchDirs(searchPaths) {
        return __awaiter(this, void 0, void 0, function* () {
            const paths = [];
            for (const p of searchPaths) {
                const fullPath = node_path_1.default.resolve(p);
                try {
                    const stat = yield (0, promises_1.lstat)(fullPath);
                    if (stat.isDirectory()) {
                        paths.push(fullPath);
                    }
                }
                catch (err) {
                    // ...
                }
            }
            const watcher = chokidar_1.default.watch(paths);
            watcher.on('all', (event, fullPath) => {
                fullPath = node_path_1.default.resolve(fullPath);
                if (event === 'change' && fullPath in this.pathsToNames) {
                    this.emit('update', this.pathsToNames[fullPath]);
                }
            });
            watcher.on('error', (err) => {
                console.error('Watcher error: ' + err);
            });
            this.fsWatcher = watcher;
        });
    }
    getSourceAsync(name) {
        return __awaiter(this, void 0, void 0, function* () {
            let res = null;
            for (const p of this.searchPaths) {
                const basePath = node_path_1.default.resolve(p);
                const fullPath = node_path_1.default.resolve(p, name);
                if (fullPath.startsWith(basePath)) {
                    try {
                        const stat = yield (0, promises_1.lstat)(fullPath);
                        if (stat && stat.isFile()) {
                            const data = yield (0, promises_1.readFile)(fullPath, 'utf-8');
                            res = { src: data, path: fullPath, noCache: this.noCache };
                            this.pathsToNames[fullPath] = name;
                            break;
                        }
                    }
                    catch (err) {
                        // ...
                    }
                }
            }
            if (!res) {
                throw new Error(`Not found template "${name}".`);
            }
            return res;
        });
    }
    destroy() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.fsWatcher) {
                yield this.fsWatcher.close();
            }
        });
    }
    getSource(name, callback) {
        this.getSourceAsync(name)
            .then((res) => {
            callback(null, res);
        })
            .catch((err) => callback(err, null));
    }
}
exports.FileSystemAsyncLoader = FileSystemAsyncLoader;
exports.default = FileSystemAsyncLoader;
