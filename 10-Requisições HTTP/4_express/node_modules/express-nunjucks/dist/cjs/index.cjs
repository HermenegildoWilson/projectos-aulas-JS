"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.expressNunjucks = void 0;
const node_path_1 = __importDefault(require("node:path"));
const nunjucks_1 = __importDefault(require("nunjucks"));
const nunjucks_async_loader_1 = __importDefault(require("nunjucks-async-loader"));
const envKeys = ['autoescape', 'throwOnUndefined', 'trimBlocks', 'lstripBlocks', 'tags'];
const expressNunjucks = (apps = [], config = {}) => {
    var _a;
    apps = Array.isArray(apps) ? apps : [apps];
    const templateDirs = apps.map((app) => app.get('views')).flat();
    if (!apps.length) {
        throw new Error('option apps required.');
    }
    const Loader = ((_a = config.loader) !== null && _a !== void 0 ? _a : nunjucks_async_loader_1.default);
    const loader = new Loader(templateDirs, {
        watch: config.watch,
        noCache: config.noCache,
    });
    const envOpts = envKeys.reduce((accum, name) => (Object.assign(Object.assign({}, accum), { [name]: config[name] })), {});
    const env = new nunjucks_1.default.Environment(loader, envOpts);
    const filters = config.filters;
    if (filters) {
        Object.keys(filters).forEach((name) => {
            env.addFilter(name, filters[name]);
        });
    }
    const globals = config.globals;
    if (globals) {
        Object.keys(globals).forEach((name) => {
            env.addGlobal(name, globals[name]);
        });
    }
    const engine = function (filePath, ctx, cb) {
        const self = this;
        const name = node_path_1.default.extname(self.name) ? self.name : self.name + self.ext;
        const njkCtx = ctx._locals && ctx._locals.njkCtx;
        if (njkCtx) {
            ctx = Object.assign(Object.assign({}, ctx), njkCtx);
        }
        env.render(name, ctx, cb);
    };
    apps.forEach((app) => {
        let engineExt = app.get('view engine');
        if (!engineExt) {
            engineExt = 'html';
            app.set('view engine', engineExt);
        }
        app.engine(engineExt, engine);
    });
    return {
        env: env,
        ctxProc: (ctxProcessors) => (req, res, next) => {
            var _a;
            const ctx = (res.locals.njkCtx = (_a = res.locals.njkCtx) !== null && _a !== void 0 ? _a : {});
            ctxProcessors.forEach((ctxProc) => {
                ctxProc(req, ctx);
            });
            next();
        },
    };
};
exports.expressNunjucks = expressNunjucks;
exports.default = exports.expressNunjucks;
